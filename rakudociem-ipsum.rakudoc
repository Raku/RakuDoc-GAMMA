=begin rakudoc :one-option<first> :another-option(2)
=TITLE Proving a renderer
=SUBTITLE A file with as much RakuDoc as we can think of
=for AUTHOR :hidden
Richard Hainsworth, aka finanalyst

=SYNOPSIS Render this file using a C<raku --doc=MyRenderer> terminal command

=head Purpose

This file is intended to prove a RakuDoc v2 renderer. It can be used in several ways:
=item to generate the AST representation of all the RakuDoc components in the specification
=item to prove a renderer that a new renderer should be able to process this file
=item to visualise how the final output of a RakuDoc source will look after processing

An attempt has been made to utilise all RakuDoc components, it is not an exhaustive test
of all components in all possible combinations. Please suggest additional combinations if
they turn out to have unusual effects.

Several I<mistakes> have been included where the RakuDoc v2 specification indicates how
inconsistent behaviours or unknown components should be handled.

The the end of the rendering of this source file, a number of warning messages should
be included.

=place toc:* :caption<The table of contents>

=place index:* :caption<A short index>

=comment The following section is to test blocks without extra options
Note that all text before a blank line and following a comment should
not be included in the final rendering.

=head1 This is a first heading

text

=head2 This is a second level heading

text

=head3 This is third level heading

A paragraph to illustrate B<Basis type> formatting.

A paragraph to illustrate I<Important type> formatting.

A paragraph to illustrate U<Unusual type> formatting.

A paragraph to illustrate O<Strikethrough type> formatting.

A paragraph to illustrate H<Superscript type> formatting.

A paragraph to illustrate J<Subscript type> formatting.

A paragraph to illustrate C<Code type> formatting.

A paragraph to illustrate V<Verbatim type> formatting.

A paragraph to illustrate Z<Zero width>formatting.

A paragraph to illustrate K<Keyboard> formatting.

A paragraph to illustrate R<Replacement> formatting.

A paragraph to illustrate T<Terminal> formatting.

A paragraph to illustrate several G<G undefined type>, Q<Q undefined type>,
W<W undefined type>, Y<Y undefined type> formatting; warnings are expected.

Various entities are possible such as E<171> or the same thing using
unicode E<LEFT-POINTING DOUBLE ANGLE QUOTATION MARK>. Entities
can be double unicodes, such as E<REGIONAL INDICATOR SYMBOL LETTER U, REGIONAL INDICATOR SYMBOL LETTER A>,
which is the Ukrainian flag.

This is an example of an Alias where V<< A<XXX> >> will be replaced by the contents of an V<=alias> directive
to be defined later in this document. Here it is: A<XXX>; the use of a forward reference.

We can also make an inline D<definition|Im-a-doppelganger>. This paragraph will be referenced later.

A developer note Î”<can be attached|v*;highly deprecated> to text.

When we want a formula F<\sum \frac{1}{n^{2}} = \frac{\pi^{2}}{6}> use V<< F<> >> markup.

Links can be made internally L<say to the first heading|#This is a first heading> or externally
L<say to the raku documentation site|https://docs.raku.org>.

A renderer should provide the opportunity to customise text using V<< M<...|..,..;...> >> markup.
The renderer M<should not recognise this functionality|PayMeMoreApp; user-id> and issue a warning.

A note N<such as this one> will not be rendered inline, but there should be a footnote or popup.

Suppose we want to place the definition P<defn:Im-a-doppelganger> here.

Normally      extra spaces are removed with paragraphs, but sometimes S<we truly        want them>.

Good text will contain X<elements to be placed> in an index. The index has already been placed
at the start of the document, although content is generated here.

=numhead This is a numbered heading, level 1

text

=numhead2 This is a second level heading

text

=numhead3 A third level

text

=numhead3 Another third level

text

=numhead2 Back to second

text

=numhead3 A third level

Although this heading has the same text in the heading, the Table of Contents
should provide a unique target for it (this may not be possible in some formats
such as MarkDown)

=numhead3 Another third level

text

=numitem The start of a numbered item list
=numitem Next item
=numitem2 now next level
=numitem2 another at two
=numitem3 a third level
=numitem1 reset to level one
=numitem3 jump levels
=item an unnumbered item
=for numitem2 :continued
but we can resume after a break

=defn Definitions
can be placed in lists

=defn Happy
when not blue

=defn Blue
when not happy

=defn Being assertive
Just B<shout> why don't you?

This is an ordinary paragraph

=numdefn Lemma 1
do not make trouble

=numdefn Lemma 2
do not shout at people

=numdefn Lemma 3
just phone the SWAT team

An ordinary paragraph creates the definition list.

=for numdefn :continued
Lemma 4
Claim you are the victim here

=alias XXX This is the alias we referenced at the top of the document

=head Blocks that are processed differently

=begin code
my $x = 2;
# a brilliant program!
=end code

=begin code :allow<B K>
my $x = 3;
# a renderer B<should> observe the basis markup
# and the K<markup> but render R<markup> verbatim
=end code

    # indenting causes an implicit code block
    my $raku = 'fantastic';

=begin input
This is a text with B<basis> markup that conserves
all spacing      when trying    to get column
just using       white spaces   naively
better           to             use tables
=end input

=begin output
This is almost the same as input
but may have a different styling
=end output

=begin nested
Occasionally some text that is inset from the margin
is required. So enclose it in a nested block.
=end nested

The following semantic block was included at the beginning in source,
but it is now included here.
=place semantic:AUTHORS :caption<Unrelenting hype> :headlevel(2)

=begin comment
=for formula :caption<Fabulous identity>
e^{i\pi}+1=0
=end comment

=begin MyBlock :caption<A customised block> :headlevel(2)
Actually it fails because no customisation has been made.
It
should
be
rendered without spaces      being chewed up.
=end MyBlock

=begin para :toc :caption<This is an extraordinary paragraph>
Some silly text which will have its own ToC entry
=end para

=head Some tables

=for table :caption<A visual table> :headlevel(2)
    Animal | Legs |    Eats
    =======================
    Zebra  +   4  + Cookies
    Human  +   2  +   Pizza
    Shark  +   0  +    Fish

=begin table :caption<A procedural table> :headlevel(2)
    =row :header
        =for cell :row-span(2)
        Date
        =for cell :column-span(3)
        Samples
        =for cell :row-span(2)
        Mean
    =row :header
        =cell I<Sample 1>
        =cell I<Sample 2>
        =cell I<Sample 3>
    =row
    =column
        =cell 2023-03-08
        =cell 2023-04-14
        =cell 2023-06-23
    =column
        =cell 0.4
        =cell 0.8
        =cell 0.2
    =column
        =cell 0.1
        =cell 0.6
        =cell 0.9
    =column
        =cell 0.3
        =cell 0.5
        =cell 0.0
    =column
        =cell 0.26667
        =cell 0.63333
        =cell 0.36667
    =row
        =for cell :label
        Mean:
        =cell 0.46667
        =cell 0.53333
        =cell 0.26667
        =cell 0.42222
=end table

=head Configuration examples

Without configuration C<embedded B<markup> is rendered> verbatim.

=begin section
=config C :allow<B>

With configuration C<embedded B<basis> markup> is rendered.

=end section

But configuration directives C<only B<apply> inside> a block scope.

=end rakudoc